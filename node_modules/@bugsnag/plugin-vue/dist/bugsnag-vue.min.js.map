{"version":3,"sources":["../../node_modules/browser-pack-flat/_prelude","src/index.js","../../node_modules/browser-pack-flat/_postlude"],"names":["f","exports","module","define","amd","window","global","self","this","bugsnag__vue","_$src_1","name","init","client","Vue","Error","prev","config","errorHandler","err","vm","info","report","BugsnagReport","message","getStacktrace","severity","unhandled","severityReason","type","updateMetaData","errorInfo","component","formatComponentName","undefined","props","$options","propsData","notify","console","error","call","_this","includeFile","$root","options","cid","_isVue","constructor","_componentTag","file","__file","match","classify","str","replace","c","toUpperCase"],"mappings":"CAAA,SAAAA,GAAA,GAAA,iBAAAC,SAAA,oBAAAC,OAAAA,OAAAD,QAAAD,SAAA,GAAA,mBAAAG,QAAAA,OAAAC,IAAAD,OAAA,GAAAH,OAAA,EAAA,oBAAAK,OAAAA,OAAA,oBAAAC,OAAAA,OAAA,oBAAAC,KAAAA,KAAAC,MAAAC,aAAAT,KAAA,CAAA,WAAA,IACAU,EAAA,UCDAA,EAAiB,CACfC,KAAM,MACNC,KAAM,SAACC,EAAQC,GACb,QADkC,IAArBA,IAAAA,EAAMT,OAAOS,MACrBA,EAAK,MAAM,IAAIC,MAAM,mBAC1B,IAAMC,EAAOF,EAAIG,OAAOC,aAmBxB,OADAJ,EAAIG,OAAOC,aAhBK,SAACC,EAAKC,EAAIC,GACxB,IACMC,EAAS,IAAIT,EAAOU,cAAcJ,EAAIR,KAAMQ,EAAIK,QAASX,EAAOU,cAAcE,cAAcN,GAD7E,CAAEO,SAAU,QAASC,WAAW,EAAMC,eAAgB,CAAEC,KAAM,uBACmCV,GAEtHG,EAAOQ,eAAe,MAAO,CAC3BC,UAAWV,EACXW,UAAWZ,EAAKa,EAAoBb,GAAI,GAAQc,UAChDC,MAAOf,EAAKA,EAAGgB,SAASC,UAAYH,YAGtCrB,EAAOyB,OAAOhB,GACS,oBAAZiB,SAAoD,mBAAlBA,QAAQC,OAAsBD,QAAQC,MAAMrB,GAErE,mBAATH,GAAqBA,EAAKyB,KAAKC,EAAMvB,EAAKC,EAAIC,IAIpD,OAKX,IAAMY,EAAsB,SAACb,EAAIuB,GAC/B,GAAIvB,EAAGwB,QAAUxB,EAAI,MAAO,SAC5B,IAAMyB,EAAwB,mBAAPzB,GAA+B,MAAVA,EAAG0B,IAC3C1B,EAAGyB,QACHzB,EAAG2B,OACD3B,EAAGgB,UAAYhB,EAAG4B,YAAYH,QAC9BzB,GAAM,GACRT,EAAOkC,EAAQlC,MAAQkC,EAAQI,cAC7BC,EAAOL,EAAQM,OACrB,IAAKxC,GAAQuC,EAAM,CACjB,IAAME,EAAQF,EAAKE,MAAM,mBACzBzC,EAAOyC,GAASA,EAAM,GAGxB,OACGzC,EAAQ,IAAO0C,EAAS1C,GAAS,IAAO,gBACxCuC,IAAwB,IAAhBP,EAAyB,OAASO,EAAQ,KAKjDG,EAAW3C,EAAe2C,SAAW,SAAAC,GAAG,OAC5CA,EAAIC,QAAQ,kBAAmB,SAAAC,GAAC,OAAIA,EAAEC,gBAAeF,QAAQ,QAAS,KCjDxE,OAAA7C","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.bugsnag__vue = f()}})(function(){var define,module,exports;\n","module.exports = {\n  name: 'vue',\n  init: (client, Vue = window.Vue) => {\n    if (!Vue) throw new Error('cannot find Vue')\n    const prev = Vue.config.errorHandler\n\n    const handler = (err, vm, info) => {\n      const handledState = { severity: 'error', unhandled: true, severityReason: { type: 'unhandledException' } }\n      const report = new client.BugsnagReport(err.name, err.message, client.BugsnagReport.getStacktrace(err), handledState, err)\n\n      report.updateMetaData('vue', {\n        errorInfo: info,\n        component: vm ? formatComponentName(vm, true) : undefined,\n        props: vm ? vm.$options.propsData : undefined\n      })\n\n      client.notify(report)\n      if (typeof console !== 'undefined' && typeof console.error === 'function') console.error(err)\n\n      if (typeof prev === 'function') prev.call(this, err, vm, info)\n    }\n\n    Vue.config.errorHandler = handler\n    return null\n  }\n}\n\n// taken and reworked from Vue.js source\nconst formatComponentName = (vm, includeFile) => {\n  if (vm.$root === vm) return '<Root>'\n  const options = typeof vm === 'function' && vm.cid != null\n    ? vm.options\n    : vm._isVue\n      ? vm.$options || vm.constructor.options\n      : vm || {}\n  let name = options.name || options._componentTag\n  const file = options.__file\n  if (!name && file) {\n    const match = file.match(/([^/\\\\]+)\\.vue$/)\n    name = match && match[1]\n  }\n\n  return (\n    (name ? ('<' + (classify(name)) + '>') : '<Anonymous>') +\n    (file && includeFile !== false ? (' at ' + file) : '')\n  )\n}\n\n// taken and reworked from Vue.js source\nconst classify = module.exports.classify = str =>\n  str.replace(/(?:^|[-_])(\\w)/g, c => c.toUpperCase()).replace(/[-_]/g, '')\n","\nreturn _$src_1;\n\n});\n"]}